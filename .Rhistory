set <- function(y) {
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
invmat <- NULL
set <- function(y) {
x <<- y
invmat <<- NULL
}
get <- function()matrix(x,sqrt(length(x)))
setinv <- function(inv) invmat <<- inv
getinv <- function() invmat
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
}
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
invmat <- NULL
set <- function(y) {
x <<- y
invmat <<- NULL
}
get <- function()matrix(x,sqrt(length(x)))
setinv <- function(inv) invmat <<- inv
getinv <- function() invmat
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(invmat)
}
mat<-x$get()
inv_mat_cal<-solve(mat)
x$setinv(inv_mat_cal)
inv_mat_cal
}
s<-makeCacheMatrix(c(9,1,8,9))
cachesolve(s)
